#!/usr/bin/env ruby
#$LOAD_PATH.unshift File.expand_path('../../lib', __FILE__)
#require 'medusa_api'
#require 'rubygems'
#require 'fileutils'
#require 'trollop'
require 'pmlatex'
#require "optparse"
#include MedusaApi

# opts = OptionParser.new do |opt|
#   OPTS = {}
#   tmp = <<"EOS"
# * NAME

# pmlatex -- upload PDF file created by `pmlatex.sty' and `pdflatex' to
# Medusa.

# * HISTORY

# April 5, 2015: First release with documentation.

# * SYNOPSIS

# Create bib record in Medusa, then upload corresponding PDF file to the
# record.  Also replace PDF and update title, date, and author.

# * DESCRIPTION

# The standard format of DREAM documentation as of April 5 (2015) is PDF
# create by combination of `pmlatex.sty' and `pdflatex'.  This program
# helps to upload and re-upload the PDF file.  This program has four
# sub-command, that are add, commit, update, and scan.

# Whenever you finish writing document the first time, you need four
# steps; (1) create a bib record in Medusa with appropriate title, date,
# and author, (2) embed Medusa-ID into the LaTeX document and recompile
# it, (3) upload the PDF file to the bib record, and (4) correlate the
# bib record with stones shown up on the document.

# On revision the document, you need three steps; (1) remove PDF file
# that is correlated with the bib record, (2) update title, date, and
# author of the record when necessary, and (3) upload the newest PDF
# file.

# This program assists those complicated procedures.  Note that this
# program reads `~/.orochirc' for Medusa configuration.


# * USAGE

# pmlatex add document[.tex]
# pmlatex commit document[.tex]
# pmlatex update document[.tex]
# pmlatex scan document[.tex]

# * EXAMPLE

# Let's assume you have finished writing `report.tex'.  You invoke
# `pmlatex add report'.  The program scans the document and picks title,
# date, and author, and create a new bib on Medusa.  At the same time,
# it inserts letters `\BibliographySisyphus{20140806114754-746408}' into
# `report.tex'.  You recompile `report.tex'.  Then you invoke `pmlatex
# commit report' to upload the PDF file to the bib record.  The commands
# you invoked on this scene are summarized as below.

# pmlatex add report
# pdflatex report
# pmlatex commit report

# You have to correlate the bib record and stones shown up on the
# document.  You invoke `pmlatex scan report'.  The program scans the
# document, picks stones, and exports them to `report.ss'.  By handling
# the `report.ss' appropriately, you correlate the bib record and the
# stones.  This command is issued implicitly on command `pmlatex add'.
# The command you invoke on this scene is summarized as below.

# pmlatex scan report

# Whenever you revise `report.tex' and have the up-to-date `report.pdf',
# you want to replace `report.pdf' on Medusa by the newest PDF.  You
# invoke `pmlatex commit report' to do so.  You may want to update
# title, author, and date on the bib record.  You invoke `pmlatex update
# report' to do so.  The commands you invoked on this scene are
# summarized as below.

# pmlatex commit report
# pmlatex update report

# * SEE ALSO

# series of Orochi utilities
# icp
# http://dream.misasa.okayama-u.ac.jp

# * IMPLEMENTATION

# Orochi, version 9
# Copyright (C) 2015 Okayama University
# License GPLv3+: GNU GPL version 3 or later
# EOS
# end
#opts.parse!

#PrefFile = "~/.orochirc"

# Disable autoflush to terminate buffering
# See (efaq-w32) Subprocess buffering
STDOUT.sync = true

app = Pmlatex::App.init()
app.start
exit
